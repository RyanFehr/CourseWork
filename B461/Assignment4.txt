CREATE DATABASE "Assignment_4"
  WITH OWNER = postgres
       ENCODING = 'UTF8'
       TABLESPACE = pg_default
       LC_COLLATE = 'English_United States.1252'
       LC_CTYPE = 'English_United States.1252'
       CONNECTION LIMIT = -1;


CREATE TABLE w (A INTEGER, B VARCHAR(5));
INSERT INTO w values(1,'John');
INSERT INTO w values(2,'Ellen');
INSERT INTO w values(3,'Ann');

--1




CREATE TABLE student1(sid INTEGER, sname VARCHAR(15));
CREATE TABLE major(sid INTEGER, major VARCHAR(15));
CREATE TABLE book(bookNo INTEGER, title VARCHAR(30), price INTEGER);
CREATE TABLE cites(bookNo INTEGER, citedBookNo INTEGER);
CREATE TABLE buys(sid INTEGER, bookNo INTEGER);


\COPY student FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\student.csv' (DELIMITER(E'\t'));
\COPY major FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\major.csv' (DELIMITER(E'\t'));
\COPY book FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\book.csv' (DELIMITER(E'\t'));
\COPY student FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\buys.csv' (DELIMITER(E'\t'));
\COPY cites FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\cites.csv' (DELIMITER(E'\t'));
\COPY buys FROM 'C:\Users\Ryan\Desktop\B461\Assignment2\buys.csv' (DELIMITER(E'\t'));

ALTER TABLE student
ADD PRIMARY KEY (sid);

ALTER TABLE major
ADD PRIMARY KEY (sid, major);

ALTER TABLE book
ADD PRIMARY KEY (bookNo);

ALTER TABLE cites
ADD PRIMARY KEY (bookNo,citedBookNo);

ALTER TABLE buys
ADD PRIMARY KEY (sid, bookNo);



ALTER TABLE major
ADD FOREIGN KEY (Sid)
REFERENCES student(Sid);


ALTER TABLE cites
ADD FOREIGN KEY (BookNo)
REFERENCES book(BookNo);

ALTER TABLE cites
ADD FOREIGN KEY (CitedBookNo)
REFERENCES book(BookNo);

ALTER TABLE buys
ADD FOREIGN KEY (Sid)
REFERENCES student(Sid);

ALTER TABLE buys
ADD FOREIGN KEY (BookNo)
REFERENCES book(BookNo);



--2





--Part 2
CREATE TABLE A(x INTEGER);
CREATE TABLE B(x INTEGER);

INSERT INTO A values(1);
INSERT INTO A values(3);

INSERT INTO B values(1);
INSERT INTO B values(2);
INSERT INTO B values(3);


--1.a

select (select count(1)
	from ((select a.x from a)
	       except
	      (select b.x from b)) q) = 0 as "PropertySatisfied";
---------------------------------------------------------------------

INSERT INTO A values(4);
--1.b
select ((select count(1)
	from (select a.x from a)q)
	=
	(select count(1)
	from (select b.x from b)q)) as "PropertySatisfied"; 
---------------------------------------------------------------------


--1.c
select (select count(1)
	from ((select a.x from a)
	       intersect
	      (select b.x from b)) q) >= 2 as "PropertySatisfied";
---------------------------------------------------------------------


--1.d
select ((select count(x) from a) IN (select x from b)) as "PropertySatisfied";
---------------------------------------------------------------------


--2.a.i
(select s.sid, count(1) as CoursesTaken
from student s, buys by, book b
where s.sid = by.sid and by.bookNo = b.bookNo and b.price>= 20 and b.price <= 40
group by s.sid)
union
(select s2.sid, 0 as CoursesTaken
from student s2
where (select count(1)
	from
	(select s.sid
	from student s, buys by, book b
	where s.sid = by.sid 
		and by.bookNo = b.bookNo 
		and b.price>= 20 
		and b.price <= 40 
		and s2.sid =s.sid) as q) = 0);
---------------------------------------------------------------------

--2.a.ii
CREATE FUNCTION numberBooks(student INTEGER)
RETURNS bigint as
$$
select count(1)
from student s, buys by, book b
where s.sid = by.sid and by.bookNo = b.bookNo and b.price>= 20 and b.price <= 40 and s.sid = student;
$$ LANGUAGE SQL

select distinct s.sid, numberBooks(s.sid)
from student s;
---------------------------------------------------------------------


--2.b.i
CREATE FUNCTION notCited(bookNumber INTEGER)
RETURNS boolean as
$$
select count(1) = 0
from (select distinct b.bookNo
      from book b, cites c
      where b.bookNo = c.citedBookNo 
	and b.bookNo = bookNumber) as q;
$$ LANGUAGE SQL

select bookNo
from book
where notCited(bookNo);
---------------------------------------------------------------------

--2.b.ii*****************


select b.bookno from book b 
where b.bookno not in (select c.citedbookno from cites c);


select b1.bookNo
from book b1, lateral(select distinct b.bookNo
      from book b, cites c
      where b.bookNo=c.citedBookNo
	and b.bookNo = b1.bookNo) as q


where(
select count(1)
from (select distinct b.bookNo
      from book b, cites c
      where b.bookNo = c.citedBookNo 
	and b.bookNo = b1.bookNo) as q) =0;



--2.c******************
select count(1)


--2.d.i
CREATE VIEW citedBook AS (select c.citedBookno AS bookno from cites c); 

CREATE VIEW studentWithAtLeastTwoMajors AS 
     (select distinct m1.sid 
	from major m1 
	where (select count(1) 
		from major m 
		where m.sid = m1.sid 
		group by sid) >=2);


select distinct s.sid, s.sname 
from student s 
where  (select count(1) 
	from (select sm.sid 
		from studentwithatleasttwomajors sm 
		where sm.sid = s.sid) q1)>=1
	and 
	(select count(1) 
	from (select b.bookno 
		from book b 
      		where  (select count(1) 
			from((select T.bookno 
				from buys T 
				where s.sid = T.sid and T.bookNo = b.bookNo) 
                              except
                              (select cb.bookno 
				from citedbook cb) ) q3) >=1 ) q2) = 0;
---------------------------------------------------------------------


--2.d.ii**********************

--2.e.i
select s1.sid, s2.sid

from	(select distinct s.sid, (select count(by.bookNo)
				from buys by
				where s.sid = by.sid) as numberBooks
	from student s) s1,
	(select distinct s.sid, (select count(by.bookNo)
				from buys by
				where s.sid = by.sid) as numberBooks
	from student s) s2


where s1.sid <> s2.sid and s1.numberBooks >= s2.numberBooks
---------------------------------------------------------------------


--2.e.ii
select s1.sid, s2.sid 
from student s1, student s2

where (select count(by.bookNo) as books
	from buys by
	where s1.sid = by.sid
	group by s1.sid) 
     >= 
	(select count(by.bookNo) as books
	from buys by
	where s2.sid = by.sid
	group by s2.sid)
     and
	s1.sid <> s2.sid;
---------------------------------------------------------------------


--2.f
select distinct by1.bookno
from buys by1, lateral (select count(1) from buys by where by1.bookNo = by.bookNo) q
where q.count = (select count(1) from student)-1
---------------------------------------------------------------------


--2.Jaccard


--3.a************

--3.b************

--3.c************




